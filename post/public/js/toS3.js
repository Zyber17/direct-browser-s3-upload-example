// Generated by CoffeeScript 1.6.2
(function() {
  var createCORSRequest, done, executeOnSignedUrl, handleFileSelect, killed, setProgress, toDB, total, uploadFile, uploadToS3,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  total = null;

  done = null;

  killed = null;

  createCORSRequest = function(method, url) {
    var xhr;

    xhr = new XMLHttpRequest();
    if (__indexOf.call(xhr, "withCredentials") >= 0) {
      xhr.open(method, url, true);
    } else if (typeof XDomainRequest !== "undefined") {
      xhr = new XDomainRequest();
      xhr.open(method, url);
    } else {
      xhr = null;
    }
    return xhr;
  };

  handleFileSelect = function(e) {
    var file, files, i, output, _i, _len;

    total = 0;
    done = 0;
    killed = 0;
    setProgress(0, 'Upload started.');
    files = document.getElementById("files").files;
    output = [];
    for (i = _i = 0, _len = files.length; _i < _len; i = ++_i) {
      file = files[i];
      uploadFile(file, i);
    }
    return total = i;
  };

  /*
  	Execute the given callback with the signed response.
  */


  executeOnSignedUrl = function(file, i, callback) {
    var xhr;

    xhr = new XMLHttpRequest();
    xhr.open('GET', "signS3/" + file.type + "?noCacheingPlease=" + (encodeURIComponent(file.name)), true);
    xhr.overrideMimeType('text/plain; charset=x-user-defined');
    xhr.onreadystatechange = function(e) {
      if (this.readyState === 4 && this.status === 200) {
        return callback(this.responseText);
      } else if (this.readyState === 4 && this.status !== 200) {
        if (this.status === 403) {
          ++killed;
          if (this.responseText = "Invalid mime") {
            return alert("" + file.name + " is not an image (png, jpg, jpeg, gif).");
          }
        } else {
          return setProgress(0, "Could not contact signing script. Status = " + this.status);
        }
      }
    };
    return xhr.send();
  };

  uploadFile = function(file, i) {
    return executeOnSignedUrl(file, i, function(signedURL) {
      return uploadToS3(file, i, signedURL);
    });
  };

  /*
  	Use a CORS call to upload the given file to S3. Assumes the url
  	parameter has been signed and is accessable for upload.
  */


  uploadToS3 = function(file, i, url) {
    var xhr;

    xhr = createCORSRequest('PUT', url);
    if (!xhr) {
      return setProgress(0, 'CORS not supported');
    } else {
      xhr.onload = function() {
        if (xhr.status === 200) {
          ++done;
          setProgress(0, 'Upload completed.');
          return toDB(i);
        } else {
          return setProgress(0, "Upload error: " + xhr.status);
        }
      };
      xhr.onerror = function() {
        return setProgress(0, 'XHR error.');
      };
      xhr.upload.onprogress = function(e) {
        var percentLoaded, _ref;

        if (e.lengthComputable) {
          percentLoaded = Math.round((e.loaded / e.total) * 100);
          return setProgress(percentLoaded, (_ref = percentLoaded === 100) != null ? _ref : {
            'Finalizing.': 'Uploading.'
          });
        }
      };
      xhr.setRequestHeader('Content-Type', file.type);
      xhr.setRequestHeader('x-amz-acl', 'public-read');
      return xhr.send(file);
    }
  };

  setProgress = function(percent, statusLabel) {
    var progress, totalPer;

    progress = document.querySelector('.percent');
    totalPer = Math.round((percent / 100 + done) / (total - killed) * 100) || 0;
    progress.style.width = "" + totalPer + "%";
    progress.textContent = "" + totalPer + "%";
    return document.getElementById('progress_bar').className = 'loading';
  };

  toDB = function(i) {
    var xhr;

    xhr = new XMLHttpRequest();
    xhr.open('GET', "confirmed/" + i, true);
    xhr.overrideMimeType('text/plain; charset=x-user-defined');
    xhr.onreadystatechange = function(e) {
      if (this.readyState === 4 && this.status === 200) {
        if (this.responseText === 'success') {
          return console.log("Saving file " + i + " to database succeeded");
        } else {
          return console.log("Saving file " + i + " to database failed. Server message: " + this.responseText);
        }
      } else if (this.readyState === 4 && this.status !== 200) {
        return console.log("Saving file " + i + " to database failed. Not 200.");
      }
    };
    return xhr.send();
  };

}).call(this);
