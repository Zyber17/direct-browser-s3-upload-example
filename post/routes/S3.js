// Generated by CoffeeScript 1.6.2
(function() {
  var createS3Policy, crypto, moment;

  crypto = require('crypto');

  moment = require('moment');

  exports.upload = function(req, res, next) {
    return res.render('upload');
  };

  exports.generateCORS = function(req, res, next) {
    return createS3Policy(req.params.slug, req.params.mime, function(err, ret) {
      if (!err) {
        return res.end(ret);
      } else {
        console.log("Error (upload): " + err);
        return res.send(403, err);
      }
    });
  };

  createS3Policy = function(slug, mimetype, callback) {
    var S3_ACCESS_KEY, S3_BUCKET_NAME, S3_SECRET_KEY, amzHeaders, expires, extension, extention, go, name, sig, signed_request, stringToSign;

    go = true;
    extention = null;
    name = Math.floor(Math.random() * 110009).toString();
    switch (mimetype) {
      case 'ALLOWED/MIMETYPE':
        extension = 'file';
        break;
      case 'OTHER_ALLOWED/MIMETYPE':
        extension = 'file1';
        break;
      default:
        go = false;
    }
    if (go) {
      S3_BUCKET_NAME = 'INFO_HERE';
      S3_ACCESS_KEY = 'INFO_HERE';
      S3_SECRET_KEY = 'INFO_HERE';
      expires = moment().add('minutes', 10).unix();
      amzHeaders = "x-amz-acl:public-read";
      stringToSign = "PUT\n\n" + mimetype + "\n" + expires + "\n" + amzHeaders + "\n/" + S3_BUCKET_NAME + "/" + name + "." + extension;
      sig = crypto.createHmac("sha1", S3_SECRET_KEY).update(stringToSign).digest("base64");
      signed_request = "https://s3.amazonaws.com/" + S3_BUCKET_NAME + "/" + name + "." + extension + "?AWSAccessKeyId=" + S3_ACCESS_KEY + "&Expires=" + expires + "&Signature=" + (encodeURIComponent(sig));
      return callback(null, signed_request);
    } else {
      return callback('Invalid mime', null);
    }
  };

  exports.confirmed = function(req, res, next) {
    return res.end('success');
  };

}).call(this);
